fn main(){
    //! scalar 标量类型_单个值：整数、浮点数、布尔值、字符
    //? integer 整数类型 i(integer) 有符号类型 u(unsigned) 无符号类型 默认 i32
    // 8位有符号整数：i8  -2^(n - 1) ~ 2^(n - 1) - 1   -128 ~ 127
    // 8位无符号整数：u8  0 ~ 2^n - 1  0 ~ 255
    // 16位有符号整数：i16
    // 16位无符号整数：u16
    // 32位有符号整数：i32
    // 32位无符号整数：u32
    // 64位有符号整数：i64
    // 64位无符号整数：u64
    // 128位有符号整数：i128
    // 128位无符号整数：u128
    // arch 平台相关的整数类型：isize usize // 系统是64位架构，那么isize就是i64，usize就是u64
    // 十六进制  0xff
    // 八进制 0o77
    // 二进制 0b1111_0000
    // 字节（仅限u8)  b'A'
    //? floating-point 浮点数类型 f(float) f32单精度 f64双精度 默认 f64
    //? boolean 布尔类型 true false 一个字节大小 8位
    //? character 字符类型 'a' 'b' 'c' '1' '2' '3' 4字节大小
    //! 复合类型 compound
    //? tuple 元组类型 (1, 2.0, 3) 长度固定，类型可以不同
    let tup :(i32,f64,bool)=(1,2.0,true);
    let (x,y,z) = tup;// 解构
    let x1 = tup.0; // 访问元组第一个元素
    let y1 = tup.1; // 访问元组第二个元素
    let z1 = tup.2; // 访问元组第三个元素
    let unit = ();// 单元值类型，没有任何值，仅用于占位,表达式不返回值时可以返回
    //? array 数组类型 [1, 2, 3, 4, 5]
    let arr:[i32;5] = [1, 2, 3, 4, 5];// 长度固定，类型相同
    let arr_init = [0;5];// 数组初始化 [0,0,0,0,0]
    let arr0 = arr[0];// 访问数组第一个元素
    // println!("{}",arr[5]);//! error 数组越界
}